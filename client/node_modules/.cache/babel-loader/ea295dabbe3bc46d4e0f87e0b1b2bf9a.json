{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\louco\\\\Documents\\\\UFS\\\\PIBIC\\\\softwares desenvolvidos\\\\biblioteca_bd\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: []\n    };\n  }\n\n  // Esta função é do ciclo de vida do ReactJS. Executada quando os componentes são montados\n  async componentDidMount() {\n    this.direcionar('/home');\n  }\n\n  renderTableData() {\n    return this.state.data.map((dado, index) => {\n      const [titulo, autor] = dado;\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 19\n        }\n      }, titulo), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 19\n        }\n      }, autor));\n    });\n  }\n\n  async direcionar(caminho, query) {\n    console.log(query);\n    await fetch(caminho).then(res => {\n      return res.json();\n    }).then(obras => {\n      this.setState({\n        data: obras.dados\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }, \"Trabalho de Banco de Dados\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"botoes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }\n    }, \"Consultas pr\\xE9 definidas\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: texto => this.direcionar(texto = '/teste', 'SELECT obras.titulo, livros.autor FROM biblioteca.obras natural join biblioteca.livros'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }, \"Teste de Consulta\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: texto => this.direcionar(texto = '/consum', 'SELECT DISTINCT obras.titulo FROM biblioteca.obras ORDER BY obras.titulo ASC'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }, \"Todas as obras em ordem alfab\\xE9tica por t\\xEDtulo\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: texto => this.direcionar(texto = '/consdois', 'SELECT COUNT(obras.titulo) FROM biblioteca.obras NATURAL JOIN biblioteca.livros'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }, \"Mostra a quantidade de obras no acervo\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: texto => this.direcionar(texto = '/constres', 'SELECT COUNT(cliente.nome) FROM biblioteca.cliente'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }\n    }, \"Mostra a quantidade de clientes da biblioteca\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: texto => this.direcionar(texto = '/consQuatro', 'SELECT cliente.nome, emprestimo.status FROM biblioteca.cliente JOIN biblioteca.emprestimo ON cliente.emprestimo_id = emprestimo.id WHERE emprestimo.status IS TRUE'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }, \"Mostra os empr\\xE9stimos ativos dos clientes\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: texto => this.direcionar(texto = '/consCinco', 'SELECT autor.id_autor, livros.titulo FROM biblioteca.autor JOIN biblioteca.livros ON autor.livro_id_isbn = livros.id_isbn'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }, \"Todos os t\\xEDtulos e id's de autores\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: texto => this.direcionar(texto = '/consSeis', 'SELECT bloqueio.id, cliente.nome FROM biblioteca.cliente JOIN biblioteca.emprestimo ON cliente.emprestimo_id = emprestimo.id JOIN biblioteca.bloqueio ON bloqueio.id = cliente.bloqueio_id WHERE bloqueio.id IS NOT NULL'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, \"Clientes com bloqueio e id do empr\\xE9stimo\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: texto => this.direcionar(texto = '/consSete', 'SELECT nom FROM biblioteca.bibliotecario NATURAL JOIN biblioteca.atendente NATURAL JOIN biblioteca.cliente'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }, \"Nomes dos funcion\\xE1rios\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: texto => this.direcionar(texto = '/consOito', 'SELECT obras.titulo FROM biblioteca.obras WHERE obras.titulo LIKE \"P%\"'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, \"Livros que come\\xE7am com P\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: texto => this.direcionar(texto = '/consNove', 'SELECT bibliotecario.i FROM biblioteca.bibliotecario GROUP BY bibliotecario.id HAVING COUNT(bibliotecario.id) > 0'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }, \"Id's dos bibliotec\\xE1rios\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: texto => this.direcionar(texto = '/consDez', 'SELECT cliente.nome FROM biblioteca.cliente WHERE EXISTS(SELECT atendente.id FROM biblioteca.atendente WHERE cliente.id = atendente.cliente_id)'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }, \"Nomes dos clientes\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: texto => this.direcionar(texto = '/consOnze', 'SELECT atendente.id, bibliotecario.id FROM biblioteca.atendente JOIN biblioteca.bibliotecario USING(id) WHERE EXISTS (SELECT cliente.nascimento FROM biblioteca.cliente WHERE cliente.nascimento BETWEEN \\\"1978-09-06\\\" AND \\\"1999-09-06\\\")'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, \"ID's dos funcion\\xE1rios\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: texto => this.direcionar(texto = '/consDoze', 'SELECT AGE(now(),(SELECT cliente.nascimento FROM biblioteca.cliente WHERE nome = \"Geovanne\"))'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }\n    }, \"Idade do cliente Geovanne\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: texto => this.direcionar(texto = '/consTreze', 'SELECT  (COUNT(obras.genero=\"Ficção Científica\")+COUNT(obras.genero=\"Fantasia\")) as total FROM biblioteca.obras JOIN biblioteca.livros ON obras.id = livros.obras_id'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, \"Quantidade total de livros de fantasia e fic\\xE7\\xE3o cient\\xEDfica\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: texto => this.direcionar(texto = '/consCatorze', 'SELECT  obras.titulo FROM biblioteca.obras WHERE obras.id IN (SELECT livros.obras_id FROM biblioteca.livros)'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }, \"Titulos de obras\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: texto => this.direcionar(texto = '/consQuinze', 'SELECT  obras.titulo FROM biblioteca.obras WHERE obras.id IN(SELECT periodico.obras_id FROM biblioteca.periodico JOIN biblioteca.obras ON obras.genero = \"Ficção Científica\" WHERE periodico.obras_id = obras.id)'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, \"Peri\\xF3dicos de fic\\xE7\\xE3o cient\\xEDfica\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"resultado\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      id: \"titulo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, \"Acervo\"), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }, this.renderTableData())))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/louco/Documents/UFS/PIBIC/softwares desenvolvidos/biblioteca_bd/client/src/App.js"],"names":["React","Component","App","state","data","componentDidMount","direcionar","renderTableData","map","dado","index","titulo","autor","caminho","query","console","log","fetch","then","res","json","obras","setState","dados","render","texto"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  state = { data: [] };\r\n\r\n    // Esta função é do ciclo de vida do ReactJS. Executada quando os componentes são montados\r\n    async componentDidMount() {\r\n        this.direcionar('/home');\r\n    }\r\n\r\n  renderTableData() {\r\n        return this.state.data.map((dado, index) => {\r\n          const [titulo, autor]  = dado;\r\n          return (\r\n              <tr>\r\n                  <td>{titulo}</td>\r\n                  <td>{autor}</td>\r\n              </tr>\r\n          )\r\n      })\r\n  }\r\n\r\n  async direcionar(caminho, query) {\r\n      console.log(query)\r\n      await fetch(caminho)\r\n          .then(res => {\r\n              return res.json();\r\n          })\r\n          .then(obras => {\r\n              this.setState({data: obras.dados});\r\n          });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n          <h2>Trabalho de Banco de Dados</h2>\r\n          <div className=\"row\">\r\n            <div className=\"botoes\">\r\n              <h2>Consultas pré definidas</h2>\r\n                <button onClick={texto => this.direcionar(texto='/teste', 'SELECT obras.titulo, livros.autor FROM biblioteca.obras natural join biblioteca.livros')}>Teste de Consulta</button>\r\n                <button onClick={texto => this.direcionar(texto='/consum', 'SELECT DISTINCT obras.titulo FROM biblioteca.obras ORDER BY obras.titulo ASC')}>Todas as obras em ordem alfabética por título</button>\r\n                <button onClick={texto => this.direcionar(texto='/consdois', 'SELECT COUNT(obras.titulo) FROM biblioteca.obras NATURAL JOIN biblioteca.livros')}>Mostra a quantidade de obras no acervo</button>\r\n                <button onClick={texto => this.direcionar(texto='/constres', 'SELECT COUNT(cliente.nome) FROM biblioteca.cliente')}>Mostra a quantidade de clientes da biblioteca</button>\r\n                <button onClick={texto => this.direcionar(texto='/consQuatro', 'SELECT cliente.nome, emprestimo.status FROM biblioteca.cliente JOIN biblioteca.emprestimo ON cliente.emprestimo_id = emprestimo.id WHERE emprestimo.status IS TRUE')}>Mostra os empréstimos ativos dos clientes</button>\r\n                <button onClick={texto => this.direcionar(texto='/consCinco', 'SELECT autor.id_autor, livros.titulo FROM biblioteca.autor JOIN biblioteca.livros ON autor.livro_id_isbn = livros.id_isbn')}>Todos os títulos e id's de autores</button>\r\n                <button onClick={texto => this.direcionar(texto='/consSeis', 'SELECT bloqueio.id, cliente.nome FROM biblioteca.cliente JOIN biblioteca.emprestimo ON cliente.emprestimo_id = emprestimo.id JOIN biblioteca.bloqueio ON bloqueio.id = cliente.bloqueio_id WHERE bloqueio.id IS NOT NULL')}>Clientes com bloqueio e id do empréstimo</button>\r\n                <button onClick={texto => this.direcionar(texto='/consSete', 'SELECT nom FROM biblioteca.bibliotecario NATURAL JOIN biblioteca.atendente NATURAL JOIN biblioteca.cliente')}>Nomes dos funcionários</button>\r\n                <button onClick={texto => this.direcionar(texto='/consOito', 'SELECT obras.titulo FROM biblioteca.obras WHERE obras.titulo LIKE \"P%\"')}>Livros que começam com P</button>\r\n                <button onClick={texto => this.direcionar(texto='/consNove', 'SELECT bibliotecario.i FROM biblioteca.bibliotecario GROUP BY bibliotecario.id HAVING COUNT(bibliotecario.id) > 0')}>Id's dos bibliotecários</button>\r\n                <button onClick={texto => this.direcionar(texto='/consDez', 'SELECT cliente.nome FROM biblioteca.cliente WHERE EXISTS(SELECT atendente.id FROM biblioteca.atendente WHERE cliente.id = atendente.cliente_id)')}>Nomes dos clientes</button>\r\n                <button onClick={texto => this.direcionar(texto='/consOnze', 'SELECT atendente.id, bibliotecario.id FROM biblioteca.atendente JOIN biblioteca.bibliotecario USING(id) WHERE EXISTS (SELECT cliente.nascimento FROM biblioteca.cliente WHERE cliente.nascimento BETWEEN \\\"1978-09-06\\\" AND \\\"1999-09-06\\\")')}>ID's dos funcionários</button>\r\n                <button onClick={texto => this.direcionar(texto='/consDoze', 'SELECT AGE(now(),(SELECT cliente.nascimento FROM biblioteca.cliente WHERE nome = \"Geovanne\"))')}>Idade do cliente Geovanne</button>\r\n                <button onClick={texto => this.direcionar(texto='/consTreze', 'SELECT  (COUNT(obras.genero=\"Ficção Científica\")+COUNT(obras.genero=\"Fantasia\")) as total FROM biblioteca.obras JOIN biblioteca.livros ON obras.id = livros.obras_id')}>Quantidade total de livros de fantasia e ficção científica</button>\r\n                <button onClick={texto => this.direcionar(texto='/consCatorze', 'SELECT  obras.titulo FROM biblioteca.obras WHERE obras.id IN (SELECT livros.obras_id FROM biblioteca.livros)')}>Titulos de obras</button>\r\n                <button onClick={texto => this.direcionar(texto='/consQuinze', 'SELECT  obras.titulo FROM biblioteca.obras WHERE obras.id IN(SELECT periodico.obras_id FROM biblioteca.periodico JOIN biblioteca.obras ON obras.genero = \"Ficção Científica\" WHERE periodico.obras_id = obras.id)')}>Periódicos de ficção científica</button>\r\n            </div>\r\n            <div className=\"resultado\">\r\n                <h2 id='titulo'>Acervo</h2>\r\n                <table>\r\n                    <tbody>\r\n                    {this.renderTableData()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}